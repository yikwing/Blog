<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yikwing`s Blog on yikwing`s Blog</title>
    <link>https://yikwing.github.io/</link>
    <description>Recent content in yikwing`s Blog on yikwing`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 11 Mar 2019 13:43:46 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>flutter Json快速实现序列化</title>
      <link>https://yikwing.github.io/2019/008/</link>
      <pubDate>Mon, 11 Mar 2019 13:43:46 +0800</pubDate>
      
      <guid>https://yikwing.github.io/2019/008/</guid>
      <description>

&lt;h2 id=&#34;json-序列化&#34;&gt;Json 序列化&lt;/h2&gt;

&lt;h3 id=&#34;1-json-数据&#34;&gt;1. json 数据&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;#Mock数据
{
  &amp;quot;item_type&amp;quot;: 1,
  &amp;quot;data&amp;quot;: {
    &amp;quot;view_count&amp;quot;: 3,
    &amp;quot;source_name&amp;quot;: &amp;quot;追球体育&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;创造历史！曼联成欧冠首支主场落后2球后晋级的球队&amp;quot;,
    &amp;quot;comment_count&amp;quot;: 2,
    &amp;quot;is_top&amp;quot;: true,
    &amp;quot;cover_img_url&amp;quot;: &amp;quot;https://static.arkcloudtech.com/FlEDUCKjeo4KdR_knI-a1yneaEGo.webp?imageMogr2/format/jpg&amp;quot;,
    &amp;quot;create_time&amp;quot;: 1551925692,
    &amp;quot;news_type&amp;quot;: 1,
    &amp;quot;id&amp;quot;: 58754
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-生成-map-列表&#34;&gt;2. 生成 Map 列表&lt;/h3&gt;

&lt;p&gt;进入&lt;a href=&#34;https://caijinglong.github.io/json2dart/index_ch.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://caijinglong.github.io/json2dart/index_ch.html&lt;/a&gt; 快速生成 Map 原型
&lt;img src=&#34;https://i.loli.net/2019/03/11/5c85f70facfea.jpg&#34; alt=&#34;Jietu20190311-134954@2x.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-添加-json-解析依赖-3-个-json-annotation-build-runner-json-serializable&#34;&gt;3. 添加 json 解析依赖(3 个 &lt;code&gt;json_annotation&lt;/code&gt; &lt;code&gt;build_runner&lt;/code&gt; &lt;code&gt;json_serializable&lt;/code&gt;)&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:
  flutter:
    sdk: flutter

  #上面默认不要动
  json_annotation: ^2.0.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  #上面默认不要动
  build_runner: ^1.2.8
  json_serializable: ^2.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-将步骤-2-生成的文件复制到-flutter-lib-目录-注意文件名&#34;&gt;4. 将步骤 2 生成的文件复制到&lt;code&gt;flutter/lib&lt;/code&gt;目录,注意文件名&lt;/h3&gt;

&lt;p&gt;执行脚本,将会在当前目录生成&lt;code&gt;*.g.dart&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter packages pub run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/11/5c85f88b7fca6.jpg&#34; alt=&#34;Jietu20190311-135525.jpg&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-导包开始解析&#34;&gt;5 导包开始解析&lt;/h3&gt;

&lt;p&gt;反序列化 fromJson&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;
  var date = ```
  {
    &amp;quot;item_type&amp;quot;: 1,
    &amp;quot;data&amp;quot;: {
      &amp;quot;view_count&amp;quot;: 3,
      &amp;quot;source_name&amp;quot;: &amp;quot;追球体育&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;创造历史！曼联成欧冠首支主场落后2球后晋级的球队&amp;quot;,
      &amp;quot;comment_count&amp;quot;: 2,
      &amp;quot;is_top&amp;quot;: true,
      &amp;quot;cover_img_url&amp;quot;: &amp;quot;https://static.arkcloudtech.com/FlEDUCKjeo4KdR_knI-a1yneaEGo.webp?imageMogr2/format/jpg&amp;quot;,
      &amp;quot;create_time&amp;quot;: 1551925692,
      &amp;quot;news_type&amp;quot;: 1,
      &amp;quot;id&amp;quot;: 58754
    }
  }```

var bean = items.fromJson(json.decode(data));
id = bean.id;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;序列化 ToJson&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  String json = JSON.encode(bean);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android中的Service</title>
      <link>https://yikwing.github.io/2019/007/</link>
      <pubDate>Wed, 20 Feb 2019 09:52:40 +0800</pubDate>
      
      <guid>https://yikwing.github.io/2019/007/</guid>
      <description>

&lt;h2 id=&#34;1-什么是-service&#34;&gt;1.什么是 Service&lt;/h2&gt;

&lt;p&gt;Service 是一个可以在后台执行长时间操作而不使用用户界面的应用组件。那么问题来了，既然它不使用用户界面，那么它怎么知道应该什么时候开始执行什么操作呢？答案是——它可以与其他的引用组件形成一些联系，从而可以根据其传来的信息在合适的时候执行合适的操作。&lt;/p&gt;

&lt;p&gt;一般来讲，这种联系分为两种：startService()以及 bindService()。这两种联系都可以使得一个 service 开始运行，但是在其他方面有着诸多不同。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;启动 service 的方式&lt;/th&gt;
&lt;th&gt;停止 service 的方式&lt;/th&gt;
&lt;th&gt;service 与启动它的组件之间的通信方式&lt;/th&gt;
&lt;th&gt;service 的生命周期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;startService&lt;/td&gt;
&lt;td&gt;在其他组件中调用 startService()方法后，服务即处于启动状态&lt;/td&gt;
&lt;td&gt;service 中调用 stopSelf()方法，或者其他组件调用 stopService()方法后，service 将停止运行&lt;/td&gt;
&lt;td&gt;没有提供默认的通信方式，启动 service 后该 service 就处于独立运行状态&lt;/td&gt;
&lt;td&gt;一旦启动，service 即可在后台无限期运行，即使启动 service 的组件已被销毁也不受其影响，直到其被停止&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bindService&lt;/td&gt;
&lt;td&gt;在其他组件中调用 bindService()方法后，服务即处于启动状态&lt;/td&gt;
&lt;td&gt;所有与 service 绑定的组件都被销毁，或者它们都调用了 unbindService()方法后，service 将停止运行&lt;/td&gt;
&lt;td&gt;可以通过 ServiceConnection 进行通信，组件可以与 service 进行交互、发送请求、获取结果，甚至是利用 IPC 跨进程执行这些操作&lt;/td&gt;
&lt;td&gt;当所有与其绑定的组件都取消绑定(可能是组件被销毁也有可能是其调用了 unbindService()方法)后，service 将停止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;1.表格中的“其他组件”不包括 Broadcast receiver，其无法直接启动或绑定 service。&lt;/p&gt;

&lt;p&gt;2.startService()与 bindService()并不冲突，同一个 service 可能既有组件调用了 startService()启动它，又有组件与它进行了绑定。当同一个 service 与其他组件同时存在这两种联系时，其生命周期会发生变化，必须从两种方法的角度看 service 均停止才能真正停止。&lt;/p&gt;

&lt;p&gt;ok，通过这个表格我们可以知道，这两种启动 service 的方式各有自己的特点，我们可以根据自己的项目需要选择合适的方式。&lt;/p&gt;

&lt;h2 id=&#34;2-如何创建一个-service&#34;&gt;2.如何创建一个 service？&lt;/h2&gt;

&lt;p&gt;关于这个，每本 Android 入门的书籍基本上都会有所提及，基本上也正如它们所述：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建一个类继承自 Service(或它的子类，如 IntentService)，重写里面的一些关键的回调方法，如 onStartCommand()，onBind()等&lt;/li&gt;
&lt;li&gt;在 Manifests 文件里面为其声明，并根据需要配置一些其他属性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;讲道理，这一切跟新建一个 Activity 灰常的像，跟孪生兄弟一样——包括其里面的一些关键方法，都充斥着一种浓浓的基情。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;onCreate()
在每个 service 的生命周期中这个方法会且仅会调用一次，并且它的调用在 onStartCommand()以及 onBond()之前，我们可以在这个方法中进行一些一次性的初始化工作。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onStartCommand()
当其他组件通过 startService()方法启动 service 时，此方法将会被调用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onBind()
当其他组件通过 bindService()方法与 service 相绑定之后，此方法将会被调用。这个方法有一个 IBinder 的返回值，这意味着在重写它的时候必须返回一个 IBinder 对象，它是用来支撑其他组件与 service 之间的通信的——另外，如果你不想让这个 service 被其他组件所绑定，可以通过在这个方法返回一个 null 值来实现。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onDestroy()
这是 service 一生中调用的最后一个方法，当这个方法被调用之后，service 就会被销毁。所以我们应当在这个方法里面进行一些资源的清理，比如注册的一些监听器什么的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 Manifests 文件里进行声明的时候，只有 android:name 属性是必须要有的，其他的属性都可以没有。但是有的时候适当的配置可以让我们的开发进行地更加顺利，所以了解一下注册一个 service 可以声明哪些属性也是很有必要的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;service
    android:enabled=[&amp;quot;true&amp;quot; | &amp;quot;false&amp;quot;]
    android:exported=[&amp;quot;true&amp;quot; | &amp;quot;false&amp;quot;]
    android:icon=&amp;quot;drawable resource&amp;quot;
    android:isolatedProcess=[&amp;quot;true&amp;quot; | &amp;quot;false&amp;quot;]
    android:label=&amp;quot;string resource&amp;quot;
    android:name=&amp;quot;string&amp;quot;
    android:permission=&amp;quot;string&amp;quot;
    android:process=&amp;quot;string&amp;quot; &amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;android:enabled : 如果为 true，则这个 service 可以被系统实例化，如果为 false，则不行。默认为 true&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:exported : 如果为 true，则其他应用的组件也可以调用这个 service 并且可以与它进行互动，如果为 false，则只有与 service 同一个应用或者相同 user ID 的应用可以开启或绑定此 service。它的默认值取决于 service 是否有 intent filters。如果一个 filter 都没有，就意味着只有指定了 service 的准确的类名才能调用，也就是说这个 service 只能应用内部使用——其他的应用不知道它的类名。这种情况下 exported 的默认值就为 false。反之，只要有了一个 filter，就意味着 service 是考虑到外界使用的情况的，这时 exported 的默认值就为 true&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:icon : 一个象征着这个 service 的 icon&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:isolatedProcess : 如果设置为 true，这个 service 将运行在一个从系统中其他部分分离出来的特殊进程中，我们只能通过 Service API 来与它进行交流。默认为 false。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:label : 显示给用户的这个 service 的名字。如果不设置，将会默认使用&lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt;的 label 属性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:name : 这个 service 的路径名，例如“com.lypeer.demo.MyService”。这个属性是唯一一个必须填的属性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:permission : 其他组件必须具有所填的权限才能启动这个 service。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;android:process : service 运行的进程的 name。默认启动的 service 是运行在主进程中的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-android&#34;&gt;public class ServiceDemo extends Service {

    private static final String TAG = &amp;quot;ServiceDome&amp;quot;;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, &amp;quot;onCreate&amp;quot;);
        //只在service创建的时候调用一次，可以在此进行一些一次性的初始化操作
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, &amp;quot;onStartCommand&amp;quot;);
        //当其他组件调用startService()方法时，此方法将会被调用
        //在这里进行这个service主要的操作
        return super.onStartCommand(intent, flags, startId);
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        Log.d(TAG, &amp;quot;onBind&amp;quot;);
        //当其他组件调用bindService()方法时，此方法将会被调用
        //如果不想让这个service被绑定，在此返回null即可
        return null;
    }

    @Override
    public void onDestroy() {
        Log.d(TAG, &amp;quot;onDestroy&amp;quot;);
        //service调用的最后一个方法
        //在此进行资源的回收
        super.onDestroy();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!--in manifests --&amp;gt;
&amp;lt;service android:name=&amp;quot;.ServiceDemo&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-如何启动-service&#34;&gt;3，如何启动 service？&lt;/h2&gt;

&lt;p&gt;前面讲了两种启动 service 的方式，但是都讲的比较概括，这里就详细的讲一下这两种方式。&lt;/p&gt;

&lt;h3 id=&#34;3-1-startservice&#34;&gt;3.1，startService()&lt;/h3&gt;

&lt;p&gt;另一个组件通过调用 startService()方法，就可以启动一个特定的 service，并且这将导致 service 中的 onStartCommand()方法被调用。在调用 startService()方法的时候，其他组件需要在方法中传递一个 intent 参数，然后 service 将会在 onStartCommand()中接收这个 intent，并获取一些数据。比如此时某个 Activity 要将一些数据存入数据库中，我就可以通过 intent 把数据传入 service，然后让 service 去进行连接数据库，存储数据等操作，而此时用户可以执行其他的任何操作——甚至包括销毁那个 Activity——这并不会影响 service 存储数据这件事。&lt;/p&gt;

&lt;p&gt;当一个 service 通过这种方式启动之后，它的生命周期就已经不受启动它的组件影响了，它可以在后台无限期的运行下去，只要 service 自身没有调用 stopSelf()并且其他的组件没有调用针对它的 stopService()。&lt;/p&gt;

&lt;p&gt;另外，如果确定了使用这种方式启动 service 并且不希望这个 service 被绑定的话，那么也许除了传统的创建一个类继承 service 之外我们有一个更好的选择——继承 IntentService。&lt;/p&gt;

&lt;p&gt;如果是扩建 Service 类的话，通常情况下我们需要新建一个用于执行工作的新线程，因为默认情况下 service 将工作于应用的主线程，而这将会降低所有正在运行的 Activity 的性能。而 IntentService 就不同了。它是 Service 的子类，它使用工作线程来注意的处理所有的 startService 请求。如果你不要求这个 service 要同时处理多个请求，那么继承这个类显然要比直接继承 Service 好到不知道哪里去了——IntentService 已经做了这些事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建默认的工作线程，用于在应用的主线程外执行传递给 onStartCommand() 的所有 Intent&lt;/li&gt;
&lt;li&gt;创建工作队列，用于将一个 Intent 逐一传递给 onHandleIntent() 实现，这样的话就永远不必担心多线程问题了&lt;/li&gt;
&lt;li&gt;在处理完所有启动请求后停止服务，从此妈妈再也不用担心我忘记调用 stopSelf() 了&lt;/li&gt;
&lt;li&gt;提供 onBind() 的默认实现（返回 null）&lt;/li&gt;
&lt;li&gt;提供 onStartCommand() 的默认实现，可将 Intent 依次发送到工作队列和 onHandleIntent() 实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此我们只需要实现 onHandleIntent()方法来完成具体的功能逻辑就可以了。&lt;/p&gt;

&lt;p&gt;举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Android&#34;&gt;//现在在一个 Activity 里面
Intent intent = new Intent(MainActivity.this , IntentServiceDemo.class);
startService(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Android&#34;&gt;public class IntentServiceDemo extends IntentService {

    public IntentServiceDemo(String name) {
        super(name);
        //构造方法
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        //在这里根据intent进行操作
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相比上面的继承 service 实现，这个确实要简单许多。但是要注意的是，如果需要重写其他的方法，比如 onDestroy()方法，一定不要删掉它的超类实现！因为它的超类实现里面也许包括了对工作线程还有工作队列的初始化以及销毁等操作，如果没有了的话很容易出问题。&lt;/p&gt;

&lt;p&gt;但是，如果你有让 service 同时处理多个请求的需求，这个时候就只能去继承 Service 了。这个时候就要自己去处理工作线程那些事。下面是一个官方的栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Android&#34;&gt;public class HelloService extends Service {
  private Looper mServiceLooper;
  private ServiceHandler mServiceHandler;

  private final class ServiceHandler extends Handler {
      public ServiceHandler(Looper looper) {
          super(looper);
      }
      @Override
      public void handleMessage(Message msg) {
          long endTime = System.currentTimeMillis() + 5*1000;
          while (System.currentTimeMillis() &amp;lt; endTime) {
              synchronized (this) {
                  try {
                      wait(endTime - System.currentTimeMillis());
                  } catch (Exception e) {
                  }
              }
          }
          stopSelf(msg.arg1);
      }
  }

  @Override
  public void onCreate() {
    HandlerThread thread = new HandlerThread(&amp;quot;ServiceStartArguments&amp;quot;,
            Process.THREAD_PRIORITY_BACKGROUND);
    thread.start();
    mServiceLooper = thread.getLooper();
    mServiceHandler = new ServiceHandler(mServiceLooper);
  }

  @Override
  public int onStartCommand(Intent intent, int flags, int startId) {
      Toast.makeText(this, &amp;quot;service starting&amp;quot;, Toast.LENGTH_SHORT).show();

      Message msg = mServiceHandler.obtainMessage();
      msg.arg1 = startId;
      mServiceHandler.sendMessage(msg);

      return START_STICKY;
  }

  @Override
  public IBinder onBind(Intent intent) {
      return null;
  }

  @Override
  public void onDestroy() {
    Toast.makeText(this, &amp;quot;service done&amp;quot;, Toast.LENGTH_SHORT).show();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比起 IntentService 来，显然做的工作要多的多的多。但是，由于是自己处理的对 onStartCommand 的调用，它可以同时执行多个请求——虽然官方的栗子里没有这样做。但是如果你想这样做，就可以为每一个请求创建一个线程，然后立即运行这些请求。&lt;/p&gt;

&lt;p&gt;另外，我们注意到 onStartCommand()的返回值是一个很奇怪的值 START_STICKY，这是个什么呢？或者说这个方法的返回值是用来干嘛的呢？事实上，它的返回值是用来指定系统对当前线程的行为的。它的返回值必须是以下常量之一：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;START_NOT_STICKY : 如果系统在 onStartCommand() 返回后终止服务，则除非有挂起 Intent 要传递，否则系统不会重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;START_STICKY : 如果系统在 onStartCommand() 返回后终止服务，则会重建服务并调用 onStartCommand()，但绝对不会重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 onStartCommand()。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;START_REDELIVER_INTENT : 如果系统在 onStartCommand() 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 onStartCommand()。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，继承 service 来实现的 service，一定要记得，停止这个 service。因为除非系统必须回收内存资源，否则系统不会停止或销毁 service。事实上，如果这个 service 是与可见组件绑定，其几乎永远不会被停止或销毁。在这种情况下，如果你忘记了在其工作完成之后将其停止，势必会造成系统资源的浪费以及电池电量的消耗，而这应当是我们要极力避免的。&lt;/p&gt;

&lt;h3 id=&#34;3-2-bindservice&#34;&gt;3.2，bindService()&lt;/h3&gt;

&lt;p&gt;这是一种比 startService 更复杂的启动方式，同时使用这种方式启动的 service 也能完成更多的事情，比如其他组件可向其发送请求，接受来自它的响应，甚至通过它来进行 IPC 等等。我们通常将绑定它的组件成为客户端，而称它为服务器。&lt;/p&gt;

&lt;p&gt;如果要创建一个支持绑定的 service，我们必须要重写它的 onBind()方法。这个方法会返回一个 IBinder 对象，它是客户端用来和服务器进行交互的接口。而要得到 IBinder 接口，我们通常有三种方式：继承 Binder 类，使用 Messenger 类，使用 AIDL。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gradle 测试/正式包同时安装,BuildConfig 配置小技巧</title>
      <link>https://yikwing.github.io/2019/006/</link>
      <pubDate>Mon, 18 Feb 2019 11:40:26 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2019/006/</guid>
      <description>

&lt;h2 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Maybe 你会有这个烦恼，在开发的时候，你会需要经常切换正式/测试服务器地址开发,或者根据不同环境进行不同的配置,这时该怎么办?有人说，我手里头有两台测试机，一台装正式包，另一台装测试包。我想说，陈独秀同学，你先坐下，咱大多数人都只有一台测试机呀。
那么，问题来了，怎么实现一台手机上同时安装正式包和测试包呢。这就是本文要解决的问题。&lt;/p&gt;

&lt;h2 id=&#34;2-实现一台手机上同时安装正式包和测试包并进行区别配置&#34;&gt;2. 实现一台手机上同时安装正式包和测试包并进行区别配置&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我们知道，Android 应用的唯一标识是包名，也就是 build.gradle 里的 applicationId。在一台手机上不允许安装的两个包的唯一标识重复。因此，只需要把测试包的 applicationId 亦即包名改一下就好了~&lt;/p&gt;

&lt;h3 id=&#34;2-1-修改测试包包名&#34;&gt;2.1 修改测试包包名&lt;/h3&gt;

&lt;p&gt;查阅文档之后发现，Android 官方对这种场景早有支持，只需要在 &lt;code&gt;app/build.gradle&lt;/code&gt; 的 &lt;code&gt;android-&amp;gt;buildTypes-&amp;gt;debug&lt;/code&gt; 节点下面设置 &lt;code&gt;applicationIdSuffix&lt;/code&gt; 即可，示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
            signingConfig signingConfigs.release //方便调试不要学
            buildConfigField &amp;quot;String&amp;quot;, &amp;quot;HOST&amp;quot;, &amp;quot;\&amp;quot;https:www.google.com\&amp;quot;&amp;quot;
            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;SHOW_LOG&amp;quot;, &amp;quot;false&amp;quot;
            applicationIdSuffix &amp;quot;.release&amp;quot;  //包名
            resValue &amp;quot;string&amp;quot;, &amp;quot;app_name&amp;quot;, &amp;quot;release&amp;quot;  //修改程序名
        }

        debug {
            signingConfig signingConfigs.release //方便调试不要学
            buildConfigField &amp;quot;String&amp;quot;, &amp;quot;HOST&amp;quot;,  &amp;quot;\&amp;quot;https:www.baidu.com\&amp;quot;&amp;quot;
            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;SHOW_LOG&amp;quot;, &amp;quot;true&amp;quot;
            applicationIdSuffix &amp;quot;.debug&amp;quot;  // 包名
            resValue &amp;quot;string&amp;quot;, &amp;quot;app_name&amp;quot;, &amp;quot;debug&amp;quot;  //修改程序名
        }

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-区别配置&#34;&gt;2.2 区别配置&lt;/h3&gt;

&lt;p&gt;眼尖的小伙伴肯定发现了,为什么除了&lt;code&gt;applicationIdSuffix&lt;/code&gt;这个以外,还有其它不懂的东西鸭! 问的好,这就是 gradle 另一个方便的类&lt;code&gt;BuildConfig&lt;/code&gt;.
&lt;img src=&#34;https://i.loli.net/2019/02/19/5c6bc4c3df0ea.jpg&#34; alt=&#34;BuildConfig_release&#34; /&gt;
&lt;img src=&#34;https://i.loli.net/2019/02/19/5c6bc4c3e1002.jpg&#34; alt=&#34;BuildConfig_debug&#34; /&gt;&lt;/p&gt;

&lt;p&gt;根据图片我们可以看到,我们设置后 App 的&lt;code&gt;APP名&lt;/code&gt;,&lt;code&gt;包名&lt;/code&gt;,&lt;code&gt;HOST&lt;/code&gt;,&lt;code&gt;SHOW_LOG&lt;/code&gt;都发生了变化,这样大家可以根据自己的业务需求进行定制化.&lt;/p&gt;

&lt;h2 id=&#34;3-实际效果演示&#34;&gt;3.实际效果演示&lt;/h2&gt;

&lt;p&gt;github Demo 地址: &lt;a href=&#34;https://github.com/yikwing/BaseAndroidModel&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/yikwing/BaseAndroidModel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/02/19/5c6bbf9b2f282.gif&#34; alt=&#34;实际效果&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yikwing.github.io/about/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yikwing.github.io/about/</guid>
      <description>

&lt;h1 id=&#34;联系方式&#34;&gt;联系方式&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;姓名：荣毅&lt;/li&gt;
&lt;li&gt;手机：18664379256&lt;/li&gt;
&lt;li&gt;Email：yikwing14@126.com&lt;/li&gt;
&lt;li&gt;微信：yikwing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;个人信息&#34;&gt;个人信息&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;技术博客：&lt;a href=&#34;http://yikwing.github.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://yikwing.github.io/&lt;/a&gt;
&lt;!-- - 荣誉奖励：获得了什么奖（获奖时间） --&gt;&lt;/li&gt;
&lt;li&gt;Github：&lt;a href=&#34;https://github.com/yikwing&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/yikwing &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;期望职位：Android 开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;项目经历&#34;&gt;项目经历&lt;/h1&gt;

&lt;h2 id=&#34;追求体育-项目&#34;&gt;追求体育 项目&lt;/h2&gt;

&lt;h3 id=&#34;项目描述&#34;&gt;项目描述&lt;/h3&gt;

&lt;!-- 介绍该项目是做什么的、使用到了什么技术以及你对项目整体设计的一个感受 --&gt;

&lt;p&gt;追球体育是一个利用 Weex 技术实现三端开发,大大提高开发时间.&lt;/p&gt;

&lt;h3 id=&#34;责任描述&#34;&gt;责任描述&lt;/h3&gt;

&lt;p&gt;主要可以从下面三点来写：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在这个项目中你负责了什么、做了什么、担任了什么角色&lt;/li&gt;
&lt;li&gt;从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用&lt;/li&gt;
&lt;li&gt;另外项目描述中，最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;开源项目和技术文章&#34;&gt;开源项目和技术文章&lt;/h1&gt;

&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Snailclimb/Java-Guide&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Java-Guide&lt;/a&gt; ：一份涵盖大部分 Java 程序员所需要掌握的核心知识。Star:3.9K; Fork:0.9k。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技术文章推荐&#34;&gt;技术文章推荐&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5b7d69e4e51d4538ca5730cb&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;可能是把 Java 内存区域讲的最清楚的一篇文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5b85ea54e51d4538dd08f601&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;搞定 JVM 垃圾回收就是这么简单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5b3b19856fb9a04fa42f8c71&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;前端&amp;amp;后端程序员必备的 Linux 基础知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5b260ec26fb9a00e8e4b031a&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;可能是把 Docker 的概念讲的最清楚的一篇文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- # 校园经历（可选）

## 2016-2017

担任学校社团-致深社副会长，主要负责团队每周活动的组建以及每周例会的主持。

## 2017-2018

担任学校传媒组织：“长江大学在线信息传媒”的副站长以及安卓组成员。主要负责每周例会主持、活动策划以及学校校园通 APP 的研发工作。 --&gt;

&lt;h1 id=&#34;技能清单&#34;&gt;技能清单&lt;/h1&gt;

&lt;p&gt;以下均为我熟练使用的技能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web 开发：PHP/Hack/Node&lt;/li&gt;
&lt;li&gt;Web 框架：ThinkPHP/Yaf/Yii/Lavarel/LazyPHP&lt;/li&gt;
&lt;li&gt;前端框架：Bootstrap/AngularJS/EmberJS/HTML5/Cocos2dJS/ionic&lt;/li&gt;
&lt;li&gt;前端工具：Bower/Gulp/SaSS/LeSS/PhoneGap&lt;/li&gt;
&lt;li&gt;数据库相关：MySQL/PgSQL/PDO/SQLite&lt;/li&gt;
&lt;li&gt;版本管理、文档和自动化部署工具：Svn/Git/PHPDoc/Phing/Composer&lt;/li&gt;
&lt;li&gt;单元测试：PHPUnit/SimpleTest/Qunit&lt;/li&gt;
&lt;li&gt;云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;自我评价-可选&#34;&gt;自我评价（可选）&lt;/h1&gt;

&lt;p&gt;自我发挥。切记不要过度自夸！！！&lt;/p&gt;

&lt;h3 id=&#34;感谢您花时间阅读我的简历-期待能有机会和您共事&#34;&gt;感谢您花时间阅读我的简历，期待能有机会和您共事。&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>使用Aria2&#43;Aria2Ng&#43;OneIndex&#43;OneDrive建立不限流量/离线BT下载/在线观看网盘</title>
      <link>https://yikwing.github.io/2019/003/</link>
      <pubDate>Tue, 22 Jan 2019 09:58:17 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2019/003/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;宝塔&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#Centos系统
yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;amp;&amp;amp; sh install.sh

#Ubuntu系统
wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;amp;&amp;amp; sudo bash install.sh

#Debian系统
wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;amp;&amp;amp; bash install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里只需要安装 Nginx 和 php5.6 就可以了，其他 FTP，Mysql 不需要&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装 Aria2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/aria2.sh &amp;amp;&amp;amp; chmod +x aria2.sh &amp;amp;&amp;amp; bash aria2.sh
#备用地址
wget -N --no-check-certificate https://www.moerats.com/usr/shell/Aria2/aria2.sh &amp;amp;&amp;amp; chmod +x aria2.sh &amp;amp;&amp;amp; bash aria2.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择 1，安装 aria2 后一路 yes 就可以了。最后会出来一个密钥，记下来&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装 ArinanNG 和 oneindex&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# NG
https://github.com/mayswind/AriaNg/releases/download/1.0.0/AriaNg-1.0.0.zip

# oneIndex
https://github.com/donwa/oneindex/archive/master.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;编辑配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dir=/Download
on-download-complete=/root/upload2one.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自动上传 OneDrive&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
path=$3
downloadpath=&#39;/Download&#39;
if [[ $2 -eq 0 ]]
       then
               exit 0
fi
while true; do  #提取下载文件根路径，如把/root/downloads/a/b/c/d.jpg变成/root/downloads/a
filepath=$path
path=${path%/*};
if [ &amp;quot;$path&amp;quot; = &amp;quot;$downloadpath&amp;quot; ] &amp;amp;&amp;amp; [ $2 -eq 1 ]  #如果下载的是单个文件
   then
   /www/server/php/72/bin/php /www/wwwroot/你的ip或者域名/one/one.php upload:file &amp;quot;$filepath&amp;quot; /upload/
   rm -rf &amp;quot;$filepath&amp;quot;
   exit 0
elif [ &amp;quot;$path&amp;quot; = &amp;quot;$downloadpath&amp;quot; ]   #文件夹
   then
   /www/server/php/72/bin/php /www/wwwroot/你的ip或者域名/one/one.php upload:folder &amp;quot;$filepath&amp;quot;/ /upload/&amp;quot;${filepath##*/}&amp;quot;/
   rm -rf &amp;quot;$filepath&amp;quot;/
   exit 0
fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;赋予权限,重启 aria2NG&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod +x /root/upload2one.sh

./aria2.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu从零开始搭建爬虫框架</title>
      <link>https://yikwing.github.io/2018/005/</link>
      <pubDate>Sat, 03 Mar 2018 11:40:26 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2018/005/</guid>
      <description>

&lt;h2 id=&#34;更换-ubuntu-apt-源&#34;&gt;更换 ubuntu apt 源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;查看 ubuntu 开发代号&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo lsb_release -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://s13.postimg.org/fq3z4univ/Jietu20180124-171333.jpg&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;## linux路径
sudo vim  /etc/apt/sources.list

deb http://mirrors.aliyun.com/ubuntu/ artful main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ artful-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ artful-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ artful-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ artful-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ artful main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ artful-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ artful-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ artful-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ artful-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装扩展插件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install python3-dev
sudo apt-get install python3-pip
sudo apt-get install virtualenv

# pip3 安装插件报错
export LC_ALL=C

virtualenv -p /usr/bin/python3 py3env
source ./py3env/bin/activite

pip3 install gerapy
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装 scrapyd&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install scrapyd
pip3 install scrapyd-client

sudo vim /etc/scrapyd/scrapyd.conf

eg:~~~~~~
[scrapyd]
eggs_dir    = eggs
logs_dir    = logs
items_dir   =
jobs_to_keep = 5
dbs_dir     = dbs
max_proc    = 0
max_proc_per_cpu = 4
finished_to_keep = 100
poll_interval = 5.0
bind_address = 127.0.0.1
http_port   = 6800
debug       = off
runner      = scrapyd.runner
application = scrapyd.app.application
launcher    = scrapyd.launcher.Launcher
webroot     = scrapyd.website.Root

[services]
schedule.json     = scrapyd.webservice.Schedule
cancel.json       = scrapyd.webservice.Cancel
addversion.json   = scrapyd.webservice.AddVersion
listprojects.json = scrapyd.webservice.ListProjects
listversions.json = scrapyd.webservice.ListVersions
listspiders.json  = scrapyd.webservice.ListSpiders
delproject.json   = scrapyd.webservice.DeleteProject
delversion.json   = scrapyd.webservice.DeleteVersion
listjobs.json     = scrapyd.webservice.ListJobs
daemonstatus.json = scrapyd.webservice.DaemonStatus
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动 gerapy&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gerapy init

cd gerapy
gerapy migrate

gerapy runserver
gerapy runserver 0.0.0.0:8888
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>scrapy语法</title>
      <link>https://yikwing.github.io/2018/004/</link>
      <pubDate>Sat, 03 Mar 2018 11:37:26 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2018/004/</guid>
      <description>

&lt;h2 id=&#34;xpath-语法&#34;&gt;xpath 语法&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;article&lt;/td&gt;
&lt;td&gt;选取所有 article 元素的所有子节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/article&lt;/td&gt;
&lt;td&gt;选取根元素 article&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;article/a&lt;/td&gt;
&lt;td&gt;选取所有属于 article 的子元素的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//div&lt;/td&gt;
&lt;td&gt;选取所有 div 子元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;article//div&lt;/td&gt;
&lt;td&gt;选取所有属于 article 元素的后代 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//@class&lt;/td&gt;
&lt;td&gt;选取所有名为 class 的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;xpath-语法-谓语&#34;&gt;xpath 语法-谓语&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/article/div[1]&lt;/td&gt;
&lt;td&gt;选取属于 article 子元素的第一个 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/article/div[last()]&lt;/td&gt;
&lt;td&gt;选取属于 article 子元素的最后一个 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/article/div[last()]&lt;/td&gt;
&lt;td&gt;选取属于 article 子元素的倒数第二个 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//div[@lang]&lt;/td&gt;
&lt;td&gt;选取所有拥有 lang 属性的 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//div[@lang=&amp;lsquo;eng&amp;rsquo;]&lt;/td&gt;
&lt;td&gt;选取所有 lang 属性为 eng 的 div 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;xpath-语法-其他&#34;&gt;xpath 语法-其他&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/div/*&lt;/td&gt;
&lt;td&gt;选取属于 div 元素的所有子节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//*&lt;/td&gt;
&lt;td&gt;选取所有元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//div[@*]&lt;/td&gt;
&lt;td&gt;选取所有带属性的 div 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//div/a | //div/p&lt;/td&gt;
&lt;td&gt;选取所有 div 元素的 a 和 p 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//span | //ul&lt;/td&gt;
&lt;td&gt;选取文档中的 span 和 ul 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;css-选择器&#34;&gt;css 选择器&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;选择所有节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;#contriner&lt;/td&gt;
&lt;td&gt;选择 id 为 contriner 的节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;.container&lt;/td&gt;
&lt;td&gt;选取所有 class 包含 container 的节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;li a&lt;/td&gt;
&lt;td&gt;选取所有 li 下的所有 a 节点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ul + p&lt;/td&gt;
&lt;td&gt;选择 ul 后面的第一个 p 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;div#container &amp;gt; ul&lt;/td&gt;
&lt;td&gt;选取 id 为 container 的 div 的第一个 ul 子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;css-选择器进阶&#34;&gt;css 选择器进阶&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ul ~ p&lt;/td&gt;
&lt;td&gt;选取与 ul 相邻的所有 p 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a[title]&lt;/td&gt;
&lt;td&gt;选取所有有 title 属性的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a[href=&amp;ldquo;xxx&amp;rdquo;]&lt;/td&gt;
&lt;td&gt;选取所有 href 属性为 xxx 值的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a[href*=&amp;ldquo;xxx&amp;rdquo;]&lt;/td&gt;
&lt;td&gt;选取所有 href 属性包含 xxx 的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a[href^=&amp;ldquo;xxx&amp;rdquo;]&lt;/td&gt;
&lt;td&gt;选择所有 href 属性以 xxx 开头的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;a[href$=&amp;ldquo;.jpg&amp;rdquo;]&lt;/td&gt;
&lt;td&gt;选取所有 href 属性以.jpg 结尾的 a 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;input[type=radio]:checked&lt;/td&gt;
&lt;td&gt;选择选中的 radio 的元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;div:not(#container)&lt;/td&gt;
&lt;td&gt;选取所有 id 非 container 的 div 属性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;li:nth-child(3)&lt;/td&gt;
&lt;td&gt;选取第三个 li 元素&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tr:nth-child(2n)&lt;/td&gt;
&lt;td&gt;第偶数个 tr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Mysql学习笔记</title>
      <link>https://yikwing.github.io/2018/001/</link>
      <pubDate>Sat, 03 Mar 2018 11:23:16 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2018/001/</guid>
      <description>

&lt;h2 id=&#34;安装-mysql-服务&#34;&gt;安装 MySql 服务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get insatll mysql-server
sudo apt-get install mysql-client

chsh -s `which zsh`
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;修改密码&#34;&gt;修改密码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;
sudo mysqld_safe --skin-grant-tables --skip-networking &amp;amp;

&amp;gt; use mysql
&amp;gt; update user set authentication_string=password(&#39;新密码&#39;),
plugin=&#39;mysql_native_password&#39; where user = &#39;root&#39;
&amp;gt; flush privileges
&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;启动-mysql-服务&#34;&gt;启动 MySql 服务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动mysql服务
mysql.server start

# 关闭mysql服务
mysql.server stop

#连接mysql数据库
sudo mysql -h host(主机地址) -u user(用户名)  -p
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动mysql服务
sudo service mysql start

# 关闭mysql服务
sudo service mysql start

#连接mysql数据库
sudo mysql -u root(用户名) -p password(密码)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sql-命令&#34;&gt;SQL 命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;查看数据库&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SHOW DATABASES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-01-04.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除数据库&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP DATABASE &amp;lt;数据库名&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用数据库&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;use &amp;lt;数据库名字&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-01-05.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;查看表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;show tables;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-01-06.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DROP TABLE 表名字;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;退出 mysql&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;quit 或 exit
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;新建数据库&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE &amp;lt;数据库名字&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-02-01.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新建表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE &amp;lt;表的名字&amp;gt;(
    列名a 数据类型(数据长度),
    列名b 数据类型(数据长度)，
    列名c 数据类型(数据长度)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-02-04.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;插入表数据&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO &amp;lt;表名&amp;gt;(列名a,列名b,列名c) VALUES(值a,值b,值c);

INSERT INTO &amp;lt;表名&amp;gt; VALUES(值a,值b,值c);

INSERT INTO &amp;lt;表名&amp;gt;(列名a,列名c) VALUES(值a,值c);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sql-约束&#34;&gt;SQL 约束&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主键&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;唯一&lt;/th&gt;
&lt;th&gt;外键&lt;/th&gt;
&lt;th&gt;非空&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;DEFAULT&lt;/td&gt;
&lt;td&gt;UNIQUE&lt;/td&gt;
&lt;td&gt;FOREIGN KEY&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://www.shiyanlou.com/courses/running&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;gt; SQL 约束&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;导入外部 sql 文件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;source &amp;lt;sql路径&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://s13.postimg.org/97e98ezgn/Jietu20180115-113737_2x.jpg&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;select-语句&#34;&gt;SELECT 语句&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;基本查询语句&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &amp;lt;列名&amp;gt; FROM &amp;lt;表名&amp;gt; WHERE 限制条件;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ADN 和 OR&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM &amp;lt;表名&amp;gt; WHERE age&amp;gt;25 &amp;lt;and|or&amp;gt; are &amp;lt;30;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;IN 和 NOT IN&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM &amp;lt;表名&amp;gt; WHERE &amp;lt;列名&amp;gt; IN (&#39;Tom&#39;,&#39;Jack&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;通配符&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# 其中 _ 代表一个未指定字符，% 代表不定个未指定.
SELECT * FROM &amp;lt;表名&amp;gt; WHERE &amp;lt;列名&amp;gt; LIKE &#39;1101__&#39;;
SELECT * FROM &amp;lt;表名&amp;gt; WHERE &amp;lt;列名&amp;gt; LIKE &#39;J%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;对结果排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# ASC 升序
SELECT * FROM &amp;lt;表名&amp;gt; ORDER BY &amp;lt;列名&amp;gt; ASC;

# DESC 降序
SELECT * FROM &amp;lt;表名&amp;gt; ORDER BY &amp;lt;列名&amp;gt; DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;SQL 内置函数和计算&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;COUNT&lt;/th&gt;
&lt;th&gt;SUM&lt;/th&gt;
&lt;th&gt;AVG&lt;/th&gt;
&lt;th&gt;MAX&lt;/th&gt;
&lt;th&gt;MIN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;作用&lt;/td&gt;
&lt;td&gt;计数&lt;/td&gt;
&lt;td&gt;求和&lt;/td&gt;
&lt;td&gt;求平均值&lt;/td&gt;
&lt;td&gt;最大值&lt;/td&gt;
&lt;td&gt;最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# AS关键词可以给值重命名
SELECT MAX(salary) AS max_salary,MIN(salary) FROM &amp;lt;表名&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;子查询&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT COUNT(proj_name) AS count_project FROM project
WHERE of_dpt IN
(SELECT in_dpt FROM employee WHERE name=&#39;Tom&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-04-13.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;连接查询&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT id,name,people_num
FROM employee,department
WHERE employee.in_dpt = department.dpt_name
ORDER BY id;

-----------------------------------------------------

SELECT id,name,people_num
FROM employee JOIN department
ON employee.in_dpt = department.dpt_name
ORDER BY id;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-04-14.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;重命名表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;RENAME TABLE 原名 TO 新名字;

ALTER TABLE 原名 RENAME 新名;

ALTER TABLE 原名 RENAME TO 新名;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-03.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;数据库及表的修改和删除&#34;&gt;数据库及表的修改和删除&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;增加一列&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束;
或： ALTER TABLE 表名字 ADD 列名字 数据类型 约束;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-05.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定添加位置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 ADD 列名字 数据类型 约束 AFTER &amp;lt;列名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-06.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;放在首行&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 ADD 列名字 数据类型 约束 FIRST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-07.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除一列&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 DROP COLUMN 列名字;
或： ALTER TABLE 表名字 DROP 列名字;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-08.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;重命名一列&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-09.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;改变数据类型&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 MODIFY 列名字 新数据类型;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;修改表的内容&#34;&gt;修改表的内容&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;修改表中的某个值&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-10.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除某一行记录&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM 表名字 WHERE 条件;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-05-11.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;索引&#34;&gt;索引&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;建立索引&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE 表名字 ADD INDEX 索引名 (列名);
CREATE INDEX 索引名 ON 表名字 (列名);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看索引&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;show index from employee;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;视图&#34;&gt;视图&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;建立视图&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE VIEW 视图名(列a,列b,列c) AS SELECT 列1,列2,列3 FROM 表名字;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看视图&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM &amp;lt;视图名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-06-02.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;导入&#34;&gt;导入&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;LOAD DATA INFILE &#39;文件路径和文件名&#39; INTO TABLE 表名字;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/MySQL/sql-06-05.png/logoblackfont&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;导出&#34;&gt;导出&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT 列1，列2 INTO OUTFILE &#39;文件路径和文件名&#39; FROM 表名字;

SELECT * INTO OUTFILE &#39;/tmp/out.txt&#39; FROM employee;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;备份&#34;&gt;备份&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysqldump -u root 数据库名&amp;gt;备份文件名;   #备份整个数据库
mysqldump -u root 数据库名 表名字&amp;gt;备份文件名;  #备份整个表
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;恢复&#34;&gt;恢复&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;source &amp;lt;SQL路径&amp;gt;

mysql -u root 新数据库名 &amp;lt; bak.sql
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MySql服务安装及命令使用</title>
      <link>https://yikwing.github.io/2018/002/</link>
      <pubDate>Sat, 03 Mar 2018 11:19:11 +0000</pubDate>
      
      <guid>https://yikwing.github.io/2018/002/</guid>
      <description>

&lt;h2 id=&#34;安装-mysql-服务&#34;&gt;安装 MySql 服务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get insatll mysql-server
sudo apt-get install mysql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;修改密码&#34;&gt;修改密码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;
sudo mysqld_safe --skin-grant-tables --skip-networking &amp;amp;

&amp;gt; use mysql
&amp;gt; update user set authentication_string=password(&#39;新密码&#39;),
plugin=&#39;mysql_native_password&#39; where user = &#39;root&#39;
&amp;gt; flush privileges
&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;mysql-设置远程访问&#34;&gt;mysql 设置远程访问&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/li&gt;
&lt;li&gt;注释掉 &amp;lsquo;#bind-address = 127.0.0.1&amp;rsquo;&lt;/li&gt;
&lt;li&gt;进入 mysql&lt;/li&gt;
&lt;li&gt;GRANT ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; TO &amp;lsquo;username&amp;rsquo;@&amp;lsquo;%&amp;rsquo; IDENTIFIED BY &amp;lsquo;password&amp;rsquo; WITH GRANT OPTION;&lt;/li&gt;
&lt;li&gt;flush PRIVILEGES&lt;/li&gt;
&lt;li&gt;退出并重启 mysql&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;启动-mysql-服务&#34;&gt;启动 MySql 服务&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动mysql服务
mysql.server start

# 关闭mysql服务
mysql.server stop

#连接mysql数据库
sudo mysql -h host(主机地址) -u user(用户名)  -p
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 启动mysql服务
sudo service mysql start

# 关闭mysql服务
sudo service mysql start

#连接mysql数据库
sudo mysql -u root(用户名) -p password(密码)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ssh-远程连接&#34;&gt;ssh 远程连接&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;虚拟机使用桥接模式&lt;/li&gt;
&lt;li&gt;sudo apt-get install ssh&lt;/li&gt;
&lt;li&gt;ssh username@host&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;输入查询&#34;&gt;输入查询&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT VERSION(),CURRENT_DATE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438158105657.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT SIN(PI()/4),(4+1)*5;

# 如果你决定不想执行正在输入过程中的一个命令，输入`\c`取消它：
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/document-uid73259labid1238timestamp1438158281502.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;创建表&#34;&gt;创建表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql&amp;gt; CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
    -&amp;gt; species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;显示数据表&#34;&gt;显示数据表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mysql&amp;gt; DESCRIBE pet;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://dn-anything-about-doc.qbox.me/document-uid73259labid1239timestamp1438163082069.png?watermark/1/image/aHR0cDovL3N5bC1zdGF0aWMucWluaXVkbi5jb20vaW1nL3dhdGVybWFyay5wbmc=/dissolve/60/gravity/SouthEast/dx/0/dy/10&#34; alt=&#34;此处输入图片的描述&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;过滤数据表-distinct&#34;&gt;过滤数据表(distinct)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select distinct owner from pet;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>